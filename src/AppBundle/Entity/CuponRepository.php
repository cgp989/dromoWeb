<?php

namespace AppBundle\Entity;

use Doctrine\ORM\EntityRepository;

/**
 * CuponRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class CuponRepository extends EntityRepository
{
    public function crearNuevoCupon(ProgramacionEnDia $programacionEnDia, UsuarioMovil $usuarioMovil){
        $cupon = new Cupon();
        $cupon->setCodigo(uniqid());
        $cupon->setEstadoCupon(
                $this->getEntityManager()->getRepository('AppBundle:EstadoCupon')->findOneByNombre('porCanjear')
            );
        $cupon->setFecha(new \DateTime("now"));
        $cupon->setInicio($programacionEnDia->getInicio());
        $cupon->setVencimiento($programacionEnDia->getVencimiento());
        $cupon->setProgramacion($programacionEnDia->getProgramacion());
        $cupon->setTipoCupon(
                $this->getEntityManager()->getRepository('AppBundle:TipoCupon')->findOneByNombre('promocion')
            );
        $cupon->setUsuarioMovil($usuarioMovil);
        $this->getEntityManager()->persist($cupon);
        $this->getEntityManager()->flush();
        return $cupon;
    }
    
    /**
     * registra en la bd un cupon como canjeado actualizando su estado
     * si es una pormocion y tiene puntos. se suman esos puntos al usuarioMovil que adquirio el cupon
     * actualiza el estado de cobro del cupon a pendiente
     * @param integer $idCupon
     */
    public function canjearCupon($idCupon){
        /* @var AppBundle\Entity\Cupon $cupon */
        $cupon = $this->find($idCupon);
        if($cupon->getEstadoCupon()->getNombre() == 'porCanjear'){
            $repositoryEstadoCupon = $this->getEntityManager()->getRepository('AppBundle:EstadoCupon');
            $repositoryEstadoCobroCupon = $this->getEntityManager()->getRepository('AppBundle:EstadoCobroCupon');
            $estadoCanjeado = $repositoryEstadoCupon->findOneByNombre('canjeado');
            $estadoCobroPendiente = $repositoryEstadoCobroCupon->findOneByNombre('pendiente');
            $cupon->setEstadoCupon($estadoCanjeado);
            $cupon->setEstadoCobroCupon($estadoCobroPendiente);
            $this->getEntityManager()->persist($cupon);
            if(!is_null($cupon->getPuntaje()) && $cupon->getPuntaje() > 0 && $cupon->getTipoCupon()->getNombre() == 'promocion'){
                $usuarioMovil = $cupon->getUsuarioMovil();
                $usuarioMovil->setPuntos($usuarioMovil->getPuntos()+$cupon->getPuntaje());
                $this->getEntityManager()->persist($usuarioMovil);
            }
            $this->getEntityManager()->flush();
            return array('exito' => true, 'cupon' => $cupon);
        }else{
            return array('exito' => false, 'cupon' => $cupon);
        }
    }
    
    /**
     * Retorna un array con los cupones vendidos por el local
     * con el id de usuario pasado por paremetro
     * 
     * @param int $idUserLocal
     * @return array array de objetos cupon
     */
    public function getVentasLocal($idUserLocal){
        $query = $this->getEntityManager()
            ->createQuery(
                "select cup
                from AppBundle:Cupon cup
                    left join cup.estadoCupon ec
                    left join cup.programacion prog
                    left join cup.tipoCupon tc
                    left join prog.promocion prom
                    left join prom.localComercial lc
                where ec.nombre=:paramEstadoCupon
                    and lc.usuario=:paramUsuario
                    and tc.nombre=:paramTipoCupon")
            ->setParameter('paramEstadoCupon', 'canjeado')
            ->setParameter('paramUsuario', $idUserLocal)
            ->setParameter('paramTipoCupon', 'promocion');
        
        //echo $query->getSQL();exit;
        return $query->getResult();
    }
}
